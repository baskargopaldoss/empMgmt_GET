{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/admin/admin.component.ts","webpack:///src/app/admin/admin.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/emp-service.service.ts","webpack:///src/app/employees/employees.component.ts","webpack:///src/app/employees/employees.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AdminComponent","selector","templateUrl","styleUrls","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","AppModule","declarations","providers","bootstrap","schemas","EmpServiceService","httpClient","apiURL","httpOptions","headers","get","pipe","errorHandler","error","errorMessage","ErrorEvent","message","status","providedIn","EmployeesComponent","empService","empList","displayedColumns","getAll","subscribe","data","dataSource","console","log","index","window","confirm","splice","paginator","pageIndex","pageSize","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>admin works!</p>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdminComponent } from './admin/admin.component';\nimport { EmployeesComponent } from './employees/employees.component';\n\n\nconst routes: Routes = [\n  {path: 'admin',component: AdminComponent},\n  {path: 'employees',component: EmployeesComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'emp-mgmt-app';\n}\n","<div>\r\n\r\n<mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row>\r\n      <!-- <button mat-icon-button>\r\n        <mat-icon (click)=\"sidenav.toggle()\">menu</mat-icon>\r\n      </button> -->\r\n      <h1>Employee Portal</h1>\r\n      <span class=\"menu-spacer\"></span>\r\n      <div>\r\n        <a mat-button [routerLink]=\"'/admin'\"> Admin </a>\r\n        <a mat-button [routerLink]=\"'/employees'\"> Employees </a>\r\n\r\n      </div>\r\n    </mat-toolbar-row>\r\n  \r\n    <!-- <mat-toolbar-row>\r\n        <span style=\"font-size: 12px;\">SimpleCRM helps you easily manage your contacts</span>\r\n      </mat-toolbar-row> -->\r\n  </mat-toolbar>\r\n   \r\n\r\n <router-outlet></router-outlet>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule,CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms'\nimport {ReactiveFormsModule} from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n import { MatButtonModule } from '@angular/material/button';\n// import { MatInputModule } from '@angular/material/input';\n// import { MatDialogModule } from '@angular/material/dialog';\n\n import {MatToolbarModule} from '@angular/material/toolbar';\n// import {MatIconModule} from '@angular/material/icon';\n// import {MatSidenavModule} from '@angular/material/sidenav';\n// import {MatListModule } from  '@angular/material/list';\nimport { MatTableModule } from '@angular/material/table'  \n\nimport { AdminComponent } from './admin/admin.component';\nimport { EmployeesComponent } from './employees/employees.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AdminComponent,\n    EmployeesComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    FormsModule,    \n    ReactiveFormsModule,\n    HttpClientModule,\n    MatTableModule,\n    MatButtonModule,\n    MatToolbarModule,\n    // MatDialogModule,\n    // MatInputModule, \n    // MatIconModule,\n    // MatSidenavModule,\n    // MatListModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  schemas:[CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n   \nimport {  Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n  \nimport { Employee } from './employee';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmpServiceService {\n  private apiURL = \"http://localhost:3000\";\n   \n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n  \n  constructor(private httpClient: HttpClient) { }\n   \n  getAll(): Observable<Employee[]> {\n    return this.httpClient.get<Employee[]>(this.apiURL + '/employees/')\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n   \n  /* create(post): Observable<Post> {\n    return this.httpClient.post<Post>(this.apiURL + '/posts/', JSON.stringify(post), this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }  \n   \n  find(id): Observable<Post> {\n    return this.httpClient.get<Post>(this.apiURL + '/posts/' + id)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n   \n  update(id, post): Observable<Post> {\n    return this.httpClient.put<Post>(this.apiURL + '/posts/' + id, JSON.stringify(post), this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n   */\n  delete(id){\n    return this.httpClient.delete<Employee>(this.apiURL + '/employee/' + id, this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n     \n  \n  errorHandler(error) {\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n }\n}","import { Component, OnInit ,ViewChild} from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { EmpServiceService } from '../emp-service.service';\nimport { Employee } from '../employee';\n\n@Component({\n  selector: 'app-employees',\n  templateUrl: './employees.component.html',\n  styleUrls: ['./employees.component.css']\n})\nexport class EmployeesComponent implements OnInit {\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n\n  empList: Employee[] = [];\n  dataSource: MatTableDataSource<Employee>;\n  displayedColumns: string[] = ['id', 'first_name', 'last_name','email']\n\n\n  constructor(public empService: EmpServiceService) { }\n  \n  ngOnInit(): void {\n    this.empService.getAll().subscribe((data: Employee[])=>{\n      this.empList = data;\n      this.dataSource = new MatTableDataSource<Employee>(this.empList);\n      console.log(this.empList);\n    })  \n  }\n  \n  deleteEmployee(index: number, e){\n    if(window.confirm('Are you sure')) {\n      const data = this.dataSource.data;\n      data.splice((this.paginator.pageIndex * this.paginator.pageSize) + index, 1);\n      this.dataSource.data = data;\n      this.empService.delete(e.id).subscribe()\n    }\n\n \n  }\n\n}\n","<!--  <div class=\"container\">\n  \n    <a href=\"#\" routerLink=\"/employee/create/\" class=\"btn btn-success\">Add New Employee</a>\n    \n    <table class=\"table table-bordered\">\n      <tr>\n        <th>ID</th>\n        <th>FirstName</th>\n        <th>LastName</th>\n        <th>Email</th>\n        <th width=\"220px\">Action</th>\n      </tr>\n      <tr *ngFor=\"let emp of empList\">\n        <td>{{ emp.id }}</td>\n        <td>{{ emp.first_name }}</td>\n        <td>{{ emp.last_name }}</td>\n        <td>{{ emp.email }}</td>\n        <td>\n          <a href=\"#\" [routerLink]=\"['/employee/', emp.id, 'edit']\" class=\"btn btn-primary\">Edit</a>\n          <button type=\"button\" (click)=\"deletePost(emp.id)\" class=\"btn btn-danger\">Delete</button>\n        </td>\n      </tr>\n    </table>\n </div> \n -->\n\n\n <!-- <mat-table #table [dataSource]=\"empList\" matSort>\n    <ng-container matColumnDef=\"{{column.id}}\" *ngFor=\"let column of columnNames\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> {{column.value}}</mat-header-cell>\n      <mat-cell *matCellDef=\"let element\"> {{element[column.id]}}</mat-cell>\n    </ng-container>\n  \n    <mat-header-row *matHeaderRowDef=\"columnNames\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: columnNames;\"></mat-row>\n  </mat-table>  -->\n\n  <!--<div class=\"mat-elevation-z8\">\n    <table mat-table [dataSource]=\"empList\">\n\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>ID</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"first_name\">\n        <th mat-header-cell *matHeaderCellDef>FIRST NAME</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.first_name}}</td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"last_name\">\n        <th mat-header-cell *matHeaderCellDef>LAST NAME</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.last_name}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"email\">\n        <th mat-header-cell *matHeaderCellDef>EMAIL</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.email}}</td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n</div> -->\n\n<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-->\n<!-- Title group  -->\n<div class=\"title-group\">\n    <h1 class=\"mat-h1\">Employees List</h1>\n    <mat-divider fxFlex=\"1 0\"></mat-divider>\n  </div>\n  \n  <p *ngIf=\"empList.length <= 0\" class=\"no-data\">There is no employees added yet!</p>\n  \n  <div class=\"container\" *ngIf=\"empList.length > 0\">\n    <div class=\"mat-elevation-z8\">\n      <table mat-table [dataSource]=\"dataSource\">\n        <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef>  ID </th>\n          <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"first_name\">\n          <th mat-header-cell *matHeaderCellDef> First Name </th>\n          <td mat-cell *matCellDef=\"let element\"> {{element.first_name}} </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"last_name\">\n          <th mat-header-cell *matHeaderCellDef> Last Name </th>\n          <td mat-cell *matCellDef=\"let element\"> {{element.last_name}} </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"email\">\n          <th mat-header-cell *matHeaderCellDef> Email </th>\n          <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"action\">\n          <th mat-header-cell *matHeaderCellDef> Action </th>\n          <td mat-cell *matCellDef=\"let element; let i = index;\">\n            <button mat-raised-button color=\"primary\" class=\"push-right\"\n              [routerLink]=\"['/edit-employee/', element.id]\">Edit</button>\n            <button mat-raised-button color=\"accent\" (click)=\"deleteEmployee(i, element)\">Delete</button>\n          </td>\n        </ng-container>\n  \n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      </table>\n  \n      <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n    </div>\n  </div>\n    ","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}